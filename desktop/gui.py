#!/usr/bin/env python3
"""
Document AI Assistant - Desktop GUI Client
"""

import sys
import os
import json
import base64
import requests
import threading
import time
from pathlib import Path
from typing import Optional, Dict, List

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLabel, QTextEdit, QListWidget, QListWidgetItem,
    QTabWidget, QFileDialog, QMessageBox, QProgressBar, QSplitter,
    QGroupBox, QLineEdit, QComboBox, QScrollArea, QFrame,
    QSystemTrayIcon, QMenu, QDialog, QGridLayout, QSpinBox
)
from PyQt6.QtCore import (
    Qt, QThread, pyqtSignal, QTimer, QRect, QPoint, QSize, QBuffer
)
from PyQt6.QtGui import (
    QFont, QIcon, QPixmap, QAction, QShortcut, QKeySequence,
    QPainter, QPen, QColor, QCursor
)


class APIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å FastAPI backend"""
    
    def __init__(self, base_url: str = "http://127.0.0.1:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.timeout = 30
    
    def check_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        try:
            response = self.session.get(f"{self.base_url}/health")
            return response.status_code == 200
        except:
            return False
    
    def upload_document(self, file_path: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            with open(file_path, 'rb') as f:
                files = {'file': (Path(file_path).name, f)}
                response = self.session.post(
                    f"{self.base_url}/api/v1/documents/upload",
                    files=files
                )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": response.text}
        except Exception as e:
            return {"error": str(e)}
    
    def get_documents(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            response = self.session.get(f"{self.base_url}/api/v1/documents/")
            if response.status_code == 200:
                return response.json().get("documents", [])
            return []
        except:
            return []
    
    def get_document(self, document_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ ID"""
        try:
            response = self.session.get(f"{self.base_url}/api/v1/documents/{document_id}")
            if response.status_code == 200:
                return response.json()
            return None
        except:
            return None
    
    def summarize_document(self, document_id: int, summary_type: str = "general") -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞"""
        try:
            payload = {
                "document_id": document_id,
                "summary_type": summary_type
            }
            response = self.session.post(
                f"{self.base_url}/api/v1/documents/{document_id}/summarize",
                json=payload
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": response.text}
        except Exception as e:
            return {"error": str(e)}
    
    def ask_question(self, document_ids: List[int], question: str) -> Optional[Dict]:
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
        try:
            payload = {
                "document_ids": document_ids,
                "question": question
            }
            response = self.session.post(
                f"{self.base_url}/api/v1/documents/question",
                json=payload
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": response.text}
        except Exception as e:
            return {"error": str(e)}
    
    def ocr_image(self, image_data: str) -> Optional[Dict]:
        """OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            payload = {"image_data": image_data}
            response = self.session.post(
                f"{self.base_url}/api/v1/documents/ocr",
                json=payload
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": response.text}
        except Exception as e:
            return {"error": str(e)}


class ScreenCaptureWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞"""
    
    captured = pyqtSignal(QRect)
    
    def __init__(self):
        super().__init__()
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint | Qt.WindowType.WindowStaysOnTopHint)
        self.setWindowState(Qt.WindowState.WindowFullScreen)
        self.setMouseTracking(True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
        screen = QApplication.primaryScreen()
        self.screenshot = screen.grabWindow(0)
        
        self.begin = QPoint()
        self.end = QPoint()
        self.drawing = False
    
    def paintEvent(self, event):
        painter = QPainter(self)
        
        # –†–∏—Å—É–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        painter.drawPixmap(self.rect(), self.screenshot, self.screenshot.rect())
        
        # –ó–∞—Ç–µ–º–Ω—è–µ–º –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        painter.fillRect(self.rect(), QColor(0, 0, 0, 100))
        
        # –ï—Å–ª–∏ –≤—ã–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–µ –±–µ–∑ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è
        if self.drawing and not self.begin.isNull() and not self.end.isNull():
            selection_rect = QRect(self.begin, self.end).normalized()
            painter.drawPixmap(selection_rect, self.screenshot, selection_rect)
            
            # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É –≤—ã–¥–µ–ª–µ–Ω–∏—è
            pen = QPen(QColor(255, 0, 0), 2)
            painter.setPen(pen)
            painter.drawRect(selection_rect)
    
    def mousePressEvent(self, event):
        if event.button() == Qt.MouseButton.LeftButton:
            self.begin = event.position().toPoint()
            self.end = self.begin
            self.drawing = True
            self.update()
    
    def mouseMoveEvent(self, event):
        if self.drawing:
            self.end = event.position().toPoint()
            self.update()
    
    def mouseReleaseEvent(self, event):
        if event.button() == Qt.MouseButton.LeftButton and self.drawing:
            self.drawing = False
            
            selection_rect = QRect(self.begin, self.end).normalized()
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–¥–µ–ª–µ–Ω–∏—è
            if selection_rect.width() > 10 and selection_rect.height() > 10:
                self.captured.emit(selection_rect)
            
            self.close()
    
    def keyPressEvent(self, event):
        if event.key() == Qt.Key.Key_Escape:
            self.close()


class WorkerThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    progress = pyqtSignal(str)
    finished = pyqtSignal(dict)
    error = pyqtSignal(str)
    
    def __init__(self, operation, *args, **kwargs):
        super().__init__()
        self.operation = operation
        self.args = args
        self.kwargs = kwargs
    
    def run(self):
        try:
            result = self.operation(*self.args, **self.kwargs)
            self.finished.emit(result or {})
        except Exception as e:
            self.error.emit(str(e))


class DocumentWidget(QFrame):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    summarize_requested = pyqtSignal(int, str)
    question_requested = pyqtSignal(list, str)
    
    def __init__(self, document_data: Dict):
        super().__init__()
        self.document_data = document_data
        self.setup_ui()
    
    def setup_ui(self):
        self.setFrameStyle(QFrame.Shape.Box)
        self.setStyleSheet("""
            QFrame {
                border: 1px solid #ddd;
                border-radius: 8px;
                margin: 5px;
                padding: 10px;
                background-color: white;
            }
        """)
        
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        title_label = QLabel(self.document_data.get("original_filename", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"))
        title_label.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        layout.addWidget(title_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        info_text = f"""
        –†–∞–∑–º–µ—Ä: {self.document_data.get('file_size', 0) // 1024} KB
        –°—Ç—Ä–∞–Ω–∏—Ü: {self.document_data.get('page_count', 'N/A')}
        –°—Ç–∞—Ç—É—Å: {self.document_data.get('processing_status', 'unknown')}
        """
        
        info_label = QLabel(info_text)
        info_label.setStyleSheet("color: #666; font-size: 10px;")
        layout.addWidget(info_label)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        summarize_btn = QPushButton("üìù –ó–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        summarize_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        summarize_btn.clicked.connect(self.on_summarize_clicked)
        buttons_layout.addWidget(summarize_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        question_btn = QPushButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        question_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        question_btn.clicked.connect(self.on_question_clicked)
        buttons_layout.addWidget(question_btn)
        
        layout.addLayout(buttons_layout)
    
    def on_summarize_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        document_id = self.document_data.get("id")
        if document_id:
            self.summarize_requested.emit(document_id, "general")
    
    def on_question_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        document_id = self.document_data.get("id")
        if document_id:
            self.question_requested.emit([document_id], "")


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.api_client = APIClient()
        self.current_documents = []
        self.capture_widget = None
        
        self.setup_ui()
        self.setup_shortcuts()
        self.setup_system_tray()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.status_timer = QTimer()
        self.status_timer.timeout.connect(self.refresh_documents)
        self.status_timer.start(5000)  # –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        self.refresh_documents()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("Document AI Assistant")
        self.setGeometry(100, 100, 1200, 800)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QHBoxLayout(central_widget)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        splitter = QSplitter(Qt.Orientation.Horizontal)
        main_layout.addWidget(splitter)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        self.setup_left_panel(splitter)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å
        self.setup_right_panel(splitter)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        splitter.setSizes([400, 800])
    
    def setup_left_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üìö –î–æ–∫—É–º–µ–Ω—Ç—ã")
        title_label.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        left_layout.addWidget(title_label)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        upload_btn = QPushButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
        upload_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 12px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        upload_btn.clicked.connect(self.upload_document)
        left_layout.addWidget(upload_btn)
        
        # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.documents_list = QListWidget()
        self.documents_list.itemClicked.connect(self.on_document_selected)
        left_layout.addWidget(self.documents_list)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.refresh_documents)
        left_layout.addWidget(refresh_btn)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = QLabel("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
        self.stats_label.setStyleSheet("color: #666; font-size: 10px;")
        left_layout.addWidget(self.stats_label)
        
        parent.addWidget(left_panel)
    
    def setup_right_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        right_layout.addWidget(self.tab_widget)
        
        # –í–∫–ª–∞–¥–∫–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
        self.setup_summary_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ Q&A
        self.setup_qa_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ OCR
        self.setup_ocr_tab()
        
        parent.addWidget(right_panel)
    
    def setup_summary_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤"""
        summary_tab = QWidget()
        layout = QVBoxLayout(summary_tab)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üìù –ö–æ–Ω—Å–ø–µ–∫—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        header.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        layout.addWidget(header)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—ã –¥–ª—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        controls_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        controls_layout = QGridLayout(controls_group)
        
        controls_layout.addWidget(QLabel("–¢–∏–ø –∫–æ–Ω—Å–ø–µ–∫—Ç–∞:"), 0, 0)
        self.summary_type_combo = QComboBox()
        self.summary_type_combo.addItems(["general", "brief", "detailed"])
        controls_layout.addWidget(self.summary_type_combo, 0, 1)
        
        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫"
        self.one_click_summary_btn = QPushButton("‚ú® –ó–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫")
        self.one_click_summary_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF6B35;
                color: white;
                border: none;
                padding: 15px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #E55A2B;
            }
            QPushButton:disabled {
                background-color: #ccc;
            }
        """)
        self.one_click_summary_btn.clicked.connect(self.one_click_summarize)
        self.one_click_summary_btn.setEnabled(False)
        controls_layout.addWidget(self.one_click_summary_btn, 1, 0, 1, 2)
        
        layout.addWidget(controls_group)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
        self.summary_display = QTextEdit()
        self.summary_display.setPlaceholderText("–ö–æ–Ω—Å–ø–µ–∫—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...")
        self.summary_display.setReadOnly(True)
        layout.addWidget(self.summary_display)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.summary_progress = QProgressBar()
        self.summary_progress.setVisible(False)
        layout.addWidget(self.summary_progress)
        
        self.tab_widget.addTab(summary_tab, "üìù –ö–æ–Ω—Å–ø–µ–∫—Ç—ã")
    
    def setup_qa_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ Q&A"""
        qa_tab = QWidget()
        layout = QVBoxLayout(qa_tab)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã")
        header.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        layout.addWidget(header)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ Q&A
        self.qa_history = QTextEdit()
        self.qa_history.setPlaceholderText("–ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤...")
        self.qa_history.setReadOnly(True)
        layout.addWidget(self.qa_history)
        
        # –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
        question_group = QGroupBox("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        question_layout = QVBoxLayout(question_group)
        
        self.question_input = QLineEdit()
        self.question_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        self.question_input.returnPressed.connect(self.ask_question)
        question_layout.addWidget(self.question_input)
        
        question_buttons = QHBoxLayout()
        
        ask_btn = QPushButton("üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç")
        ask_btn.clicked.connect(self.ask_question)
        ask_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        question_buttons.addWidget(ask_btn)
        
        clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.clicked.connect(lambda: self.qa_history.clear())
        question_buttons.addWidget(clear_btn)
        
        question_layout.addLayout(question_buttons)
        layout.addWidget(question_group)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è Q&A
        self.qa_progress = QProgressBar()
        self.qa_progress.setVisible(False)
        layout.addWidget(self.qa_progress)
        
        self.tab_widget.addTab(qa_tab, "‚ùì Q&A")
    
    def setup_ocr_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ OCR"""
        ocr_tab = QWidget()
        layout = QVBoxLayout(ocr_tab)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üëÅÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∞")
        header.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        layout.addWidget(header)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions = QLabel("""
        <b>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:</b><br>
        ‚Ä¢ <b>Ctrl+Shift+S</b> - –í—ã–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞<br>
        ‚Ä¢ <b>Ctrl+Shift+Q</b> - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É<br><br>
        
        <i>–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –∏ AI –Ω–∞–π–¥–µ—Ç –æ—Ç–≤–µ—Ç –≤ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö!</i>
        """)
        instructions.setStyleSheet("color: #666; padding: 10px; background-color: #f9f9f9; border-radius: 4px;")
        layout.addWidget(instructions)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
        capture_btn = QPushButton("üì∑ –í—ã–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞")
        capture_btn.setStyleSheet("""
            QPushButton {
                background-color: #9C27B0;
                color: white;
                border: none;
                padding: 15px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #7B1FA2;
            }
        """)
        capture_btn.clicked.connect(self.capture_screen_area)
        layout.addWidget(capture_btn)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        ocr_group = QGroupBox("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
        ocr_group_layout = QVBoxLayout(ocr_group)
        
        self.ocr_result = QTextEdit()
        self.ocr_result.setPlaceholderText("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...")
        ocr_group_layout.addWidget(self.ocr_result)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ OCR —Ç–µ–∫—Å—Ç—É
        ocr_question_btn = QPushButton("üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –ø–æ —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É")
        ocr_question_btn.clicked.connect(self.ask_question_from_ocr)
        ocr_question_btn.setEnabled(False)
        ocr_group_layout.addWidget(ocr_question_btn)
        self.ocr_question_btn = ocr_question_btn
        
        layout.addWidget(ocr_group)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è OCR
        self.ocr_progress = QProgressBar()
        self.ocr_progress.setVisible(False)
        layout.addWidget(self.ocr_progress)
        
        self.tab_widget.addTab(ocr_tab, "üëÅÔ∏è OCR")
    
    def setup_shortcuts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # Ctrl+Shift+S - –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
        capture_shortcut = QShortcut(QKeySequence("Ctrl+Shift+S"), self)
        capture_shortcut.activated.connect(self.capture_screen_area)
        
        # Ctrl+Shift+Q - –≤–æ–ø—Ä–æ—Å –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
        question_shortcut = QShortcut(QKeySequence("Ctrl+Shift+Q"), self)
        question_shortcut.activated.connect(self.capture_and_question)
    
    def setup_system_tray(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""
        if QSystemTrayIcon.isSystemTrayAvailable():
            self.tray_icon = QSystemTrayIcon(self)
            
            # –ò–∫–æ–Ω–∫–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—É—é)
            self.tray_icon.setIcon(self.style().standardIcon(self.style().StandardPixmap.SP_ComputerIcon))
            
            # –ú–µ–Ω—é —Ç—Ä–µ—è
            tray_menu = QMenu()
            
            show_action = QAction("–ü–æ–∫–∞–∑–∞—Ç—å", self)
            show_action.triggered.connect(self.show)
            tray_menu.addAction(show_action)
            
            quit_action = QAction("–í—ã—Ö–æ–¥", self)
            quit_action.triggered.connect(QApplication.instance().quit)
            tray_menu.addAction(quit_action)
            
            self.tray_icon.setContextMenu(tray_menu)
            self.tray_icon.show()
            
            # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞
            self.tray_icon.activated.connect(self.tray_icon_activated)
    
    def tray_icon_activated(self, reason):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ –≤ —Ç—Ä–µ–µ"""
        if reason == QSystemTrayIcon.ActivationReason.DoubleClick:
            self.show()
            self.raise_()
            self.activateWindow()
    
    def upload_document(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
            "",
            "–î–æ–∫—É–º–µ–Ω—Ç—ã (*.pdf *.pptx *.docx *.txt);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        
        if file_path:
            self.upload_document_async(file_path)
    
    def upload_document_async(self, file_path: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        self.show_status("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        def upload_operation():
            return self.api_client.upload_document(file_path)
        
        self.worker = WorkerThread(upload_operation)
        self.worker.finished.connect(self.on_upload_finished)
        self.worker.error.connect(self.on_operation_error)
        self.worker.start()
    
    def on_upload_finished(self, result: Dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        if "error" in result:
            self.show_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result['error']}")
        else:
            self.show_success(f"–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ! ID: {result.get('document_id')}")
            self.refresh_documents()
    
    def refresh_documents(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        def get_documents():
            return self.api_client.get_documents()
        
        self.worker = WorkerThread(get_documents)
        self.worker.finished.connect(self.on_documents_loaded)
        self.worker.start()
    
    def on_documents_loaded(self, documents: List[Dict]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        self.current_documents = documents if isinstance(documents, list) else []
        self.update_documents_list()
        self.update_stats()
    
    def update_documents_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        self.documents_list.clear()
        
        for doc in self.current_documents:
            item_text = f"üìÑ {doc.get('original_filename', 'Unknown')}"
            status = doc.get('processing_status', 'unknown')
            
            if status == 'completed':
                item_text += " ‚úÖ"
            elif status == 'processing':
                item_text += " ‚è≥"
            elif status == 'failed':
                item_text += " ‚ùå"
            else:
                item_text += " ‚è∏Ô∏è"
            
            item = QListWidgetItem(item_text)
            item.setData(Qt.ItemDataRole.UserRole, doc)
            self.documents_list.addItem(item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–æ–¥–∏–Ω –∫–ª–∏–∫"
        completed_docs = [d for d in self.current_documents if d.get('processing_status') == 'completed']
        self.one_click_summary_btn.setEnabled(len(completed_docs) > 0)
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total = len(self.current_documents)
        completed = len([d for d in self.current_documents if d.get('processing_status') == 'completed'])
        processing = len([d for d in self.current_documents if d.get('processing_status') == 'processing'])
        
        stats_text = f"–í—Å–µ–≥–æ: {total} | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {completed} | –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {processing}"
        self.stats_label.setText(stats_text)
    
    def on_document_selected(self, item: QListWidgetItem):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        document = item.data(Qt.ItemDataRole.UserRole)
        if document:
            self.show_document_info(document)
    
    def show_document_info(self, document: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        info_text = f"""
        <h3>üìÑ {document.get('original_filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç')}</h3>
        
        <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b><br>
        ‚Ä¢ ID: {document.get('id')}<br>
        ‚Ä¢ –†–∞–∑–º–µ—Ä: {document.get('file_size', 0) // 1024} KB<br>
        ‚Ä¢ –¢–∏–ø: {document.get('file_type', 'unknown').upper()}<br>
        ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü: {document.get('page_count', 'N/A')}<br>
        ‚Ä¢ –°—Ç–∞—Ç—É—Å: {document.get('processing_status', 'unknown')}<br>
        ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω: {document.get('created_at', 'N/A')[:19]}<br>
        """
        
        if document.get('processing_status') == 'failed':
            info_text += f"<br><b style='color: red;'>–û—à–∏–±–∫–∞:</b> {document.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
        self.summary_display.setHtml(info_text)
    
    def one_click_summarize(self):
        """–ö–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        completed_docs = [d for d in self.current_documents if d.get('processing_status') == 'completed']
        
        if not completed_docs:
            self.show_error("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        latest_doc = max(completed_docs, key=lambda x: x.get('created_at', ''))
        
        self.summarize_document_async(latest_doc['id'], self.summary_type_combo.currentText())
    
    def summarize_document_async(self, document_id: int, summary_type: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞"""
        self.show_progress("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞...", self.summary_progress)
        
        def summarize_operation():
            return self.api_client.summarize_document(document_id, summary_type)
        
        self.worker = WorkerThread(summarize_operation)
        self.worker.finished.connect(self.on_summarize_finished)
        self.worker.error.connect(self.on_operation_error)
        self.worker.start()
    
    def on_summarize_finished(self, result: Dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.hide_progress(self.summary_progress)
        
        if "error" in result:
            self.show_error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {result['error']}")
        else:
            summary_data = result.get('summary', {})
            summary_text = summary_data.get('summary_text', '–ö–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç
            summary_text_html = summary_text.replace("\n", "<br>")

            formatted_summary = f"""
                <h3>üìù –ö–æ–Ω—Å–ø–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞</h3>
                <p><b>–¢–∏–ø:</b> {summary_data.get('summary_type', 'general')}</p>
                <p><b>–ú–æ–¥–µ–ª—å:</b> {summary_data.get('model_used', 'unknown')}</p>
                <p><b>–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> {summary_data.get('generation_time', 0):.2f} —Å–µ–∫</p>
                <hr>
                <div style="line-height: 1.6; font-size: 14px;">
                {summary_text_html}
                </div> """

            self.summary_display.setHtml(formatted_summary)
            self.show_success("–ö–æ–Ω—Å–ø–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    def ask_question(self):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
        question = self.question_input.text().strip()
        if not question:
            self.show_error("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        completed_docs = [d['id'] for d in self.current_documents if d.get('processing_status') == 'completed']
        
        if not completed_docs:
            self.show_error("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞")
            return
        
        self.ask_question_async(completed_docs, question)
    
    def ask_question_async(self, document_ids: List[int], question: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞"""
        self.show_progress("–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞...", self.qa_progress)
        
        def question_operation():
            return self.api_client.ask_question(document_ids, question)
        
        self.worker = WorkerThread(question_operation)
        self.worker.finished.connect(lambda result: self.on_question_answered(result, question))
        self.worker.error.connect(self.on_operation_error)
        self.worker.start()
    
    def on_question_answered(self, result: Dict, question: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        self.hide_progress(self.qa_progress)
        
        if "error" in result:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞: {result['error']}")
        else:
            answer = result.get('answer', '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
            confidence = result.get('confidence_score', 0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º Q&A –≤ –∏—Å—Ç–æ—Ä–∏—é
            qa_entry = f"""
            <div style="border: 1px solid #ddd; margin: 10px 0; padding: 10px; border-radius: 5px;">
                <p><b>‚ùì –í–æ–ø—Ä–æ—Å:</b> {question}</p>
                <p><b>‚úÖ –û—Ç–≤–µ—Ç:</b> {answer}</p>
                <p style="color: #666; font-size: 12px;">
                    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f} | –í—Ä–µ–º—è: {result.get('response_time', 0):.2f}—Å
                </p>
            </div>
            """
            
            current_html = self.qa_history.toHtml()
            self.qa_history.setHtml(current_html + qa_entry)
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.question_input.clear()
            
            self.show_success("–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω!")
    
    def capture_screen_area(self):
        """–ó–∞—Ö–≤–∞—Ç –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞"""
        self.hide()  # —Å–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        QTimer.singleShot(500, self.start_screen_capture)
    
    def start_screen_capture(self):
        """–ó–∞–ø—É—Å–∫ –≤–∏–¥–∂–µ—Ç–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞"""
        self.capture_widget = ScreenCaptureWidget()
        self.capture_widget.captured.connect(self.on_screen_captured)
        self.capture_widget.show()
    
    def on_screen_captured(self, rect: QRect):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—Ö–≤–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞"""
        self.show()  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ
        
        try:
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å
            screen = QApplication.primaryScreen()
            pixmap = screen.grabWindow(0, rect.x(), rect.y(), rect.width(), rect.height())
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            byte_array = bytearray()
            buffer = QBuffer(byte_array)
            buffer.open(QBuffer.OpenModeFlag.WriteOnly)
            pixmap.save(buffer, "PNG")
            image_base64 = base64.b64encode(byte_array).decode('utf-8')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ OCR
            self.process_ocr_async(image_base64)
            
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {e}")
    
    def capture_and_question(self):
        """–ó–∞—Ö–≤–∞—Ç –æ–±–ª–∞—Å—Ç–∏ –∏ —Å—Ä–∞–∑—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å
        self.capture_screen_area()
        # –ü–æ—Å–ª–µ OCR –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞–¥–∏–º –≤–æ–ø—Ä–æ—Å
        self._auto_question_after_ocr = True
    
    def process_ocr_async(self, image_data: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ OCR"""
        self.show_progress("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...", self.ocr_progress)
        self.tab_widget.setCurrentIndex(2)  # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É OCR
        
        def ocr_operation():
            return self.api_client.ocr_image(image_data)
        
        self.worker = WorkerThread(ocr_operation)
        self.worker.finished.connect(self.on_ocr_finished)
        self.worker.error.connect(self.on_operation_error)
        self.worker.start()
    
    def on_ocr_finished(self, result: Dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è OCR"""
        self.hide_progress(self.ocr_progress)
        
        if "error" in result:
            self.show_error(f"–û—à–∏–±–∫–∞ OCR: {result['error']}")
        else:
            extracted_text = result.get('extracted_text', '')
            confidence = result.get('confidence_score', 0)
            
            if extracted_text.strip():
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                extracted_text_html = extracted_text.replace("\n", "<br>")

                ocr_display = f"""
                    <h4>üëÅÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</h4>
                    <p><b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {confidence:.2f}</p>
                    <p><b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {result.get('processing_time', 0):.2f}—Å</p>
                    <hr>
                    <div style="font-family: monospace; background-color: #f5f5f5; padding: 10px; border-radius: 4px;">
                    {extracted_text_html}
                    </div>
                    """

                
                self.ocr_result.setHtml(ocr_display)
                self.ocr_question_btn.setEnabled(True)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç–∞
                if hasattr(self, '_auto_question_after_ocr') and self._auto_question_after_ocr:
                    self._auto_question_after_ocr = False
                    self.ask_question_from_ocr()
                
                self.show_success("–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            else:
                self.ocr_result.setPlainText("–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
                self.ocr_question_btn.setEnabled(False)
                self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
    
    def ask_question_from_ocr(self):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ OCR —Ç–µ–∫—Å—Ç–∞"""
        ocr_text = self.ocr_result.toPlainText()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—É–±–∏—Ä–∞–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É)
        import re
        text_match = re.search(r'<div[^>]*>(.*?)</div>', ocr_text, re.DOTALL)
        if text_match:
            clean_text = text_match.group(1).replace('<br>', ' ').strip()
        else:
            clean_text = ocr_text.strip()
        
        if not clean_text:
            self.show_error("–ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        completed_docs = [d['id'] for d in self.current_documents if d.get('processing_status') == 'completed']
        
        if not completed_docs:
            self.show_error("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞")
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É Q&A
        self.tab_widget.setCurrentIndex(1)
        
        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
        self.ask_question_async(completed_docs, clean_text)
    
    def show_progress(self, message: str, progress_bar: QProgressBar):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        progress_bar.setVisible(True)
        progress_bar.setRange(0, 0)  # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.statusBar().showMessage(message)
    
    def hide_progress(self, progress_bar: QProgressBar):
        """–°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        progress_bar.setVisible(False)
        self.statusBar().clearMessage()
    
    def show_status(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.statusBar().showMessage(message, 3000)
    
    def show_success(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        self.statusBar().showMessage(f"‚úÖ {message}", 5000)
    
    def show_error(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.statusBar().showMessage(f"‚ùå {message}", 10000)
        
        # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if "–æ—à–∏–±–∫–∞" in message.lower() or "error" in message.lower():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", message)
    
    def on_operation_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.hide_progress(self.summary_progress)
        self.hide_progress(self.qa_progress)
        self.hide_progress(self.ocr_progress)
        self.show_error(f"–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {error_message}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if hasattr(self, 'tray_icon') and self.tray_icon.isVisible():
            # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç—Ä–µ–π –≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            self.hide()
            self.tray_icon.showMessage(
                "Document AI Assistant",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π",
                QSystemTrayIcon.MessageIcon.Information,
                2000
            )
            event.ignore()
        else:
            event.accept()


class SettingsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.setFixedSize(400, 300)
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        api_group = QGroupBox("API —Å–µ—Ä–≤–µ—Ä")
        api_layout = QGridLayout(api_group)
        
        api_layout.addWidget(QLabel("–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:"), 0, 0)
        self.server_input = QLineEdit("http://127.0.0.1:8000")
        api_layout.addWidget(self.server_input, 0, 1)
        
        api_layout.addWidget(QLabel("–¢–∞–π–º–∞—É—Ç (—Å–µ–∫):"), 1, 0)
        self.timeout_spin = QSpinBox()
        self.timeout_spin.setRange(5, 300)
        self.timeout_spin.setValue(30)
        api_layout.addWidget(self.timeout_spin, 1, 1)
        
        layout.addWidget(api_group)
        
        # OCR –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ocr_group = QGroupBox("OCR –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        ocr_layout = QGridLayout(ocr_group)
        
        ocr_layout.addWidget(QLabel("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:"), 0, 0)
        self.preprocess_combo = QComboBox()
        self.preprocess_combo.addItems(["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–í–∫–ª—é—á–µ–Ω–∞", "–û—Ç–∫–ª—é—á–µ–Ω–∞"])
        ocr_layout.addWidget(self.preprocess_combo, 0, 1)
        
        layout.addWidget(ocr_group)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        
        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_btn.clicked.connect(self.accept)
        buttons_layout.addWidget(save_btn)
        
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_btn.clicked.connect(self.reject)
        buttons_layout.addWidget(cancel_btn)
        
        layout.addLayout(buttons_layout)


def check_server_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    client = APIClient()
    return client.check_health()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)
    app.setApplicationName("Document AI Assistant")
    app.setApplicationVersion("0.1.0")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    if not check_server_connection():
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Warning)
        msg.setWindowTitle("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        msg.setText("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É API")
        msg.setInformativeText(
            "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:\n"
            "python start_server.py\n\n"
            "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backend/"
        )
        msg.setStandardButtons(QMessageBox.StandardButton.Retry | QMessageBox.StandardButton.Close)
        
        if msg.exec() == QMessageBox.StandardButton.Retry:
            if not check_server_connection():
                sys.exit(1)
        else:
            sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = MainWindow()
    window.show()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_msg = QMessageBox()
    welcome_msg.setIcon(QMessageBox.Icon.Information)
    welcome_msg.setWindowTitle("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    welcome_msg.setText("Document AI Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    welcome_msg.setInformativeText(
        "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n"
        "‚Ä¢ Ctrl+Shift+S - –í—ã–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞\n"
        "‚Ä¢ Ctrl+Shift+Q - –í—ã–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É!"
    )
    welcome_msg.exec()
    
    return app.exec()


if __name__ == "__main__":
    exit(main())